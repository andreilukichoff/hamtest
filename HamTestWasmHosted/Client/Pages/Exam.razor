@page "/exam/{category:int}"
@using HamTestWasm.Extensions
@using HamTestWasmHosted.Shared.Dto
@using HamTestWasmHosted.Shared.Form
@using Majorsoft.Blazor.Components.Common.JsInterop.Scroll
@using Microsoft.AspNetCore.Components
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Пробный экзамен для получения @Category квалификационной категории</h1>

@if (!_formSubmitted)
{
    if (exam == null)
    {
        <p>
            <em>Загрузка...</em>
        </p>
    }
    else
    {
        switch (Category)
        {
            case 1:
                <p class="fst-italic">
                    Первая квалификационная категория соответствует полной лицензии СЕРТ. Для её получения нужно сдать теоретический экзамен по программе полной лицензии СЕРТ (T/R 61-02)
                    и дополнительно продемонстрировать умение принять передаваемый азбукой Морзе текст объёмом 250 знаков со скоростью 60 знаков в минуту.
                </p>
                break;
            case 2:
                <p class="fst-italic">
                    Вторая квалификационная категория соответствует полной лицензии СЕРТ. Для её получения нужно сдать теоретический экзамен по программе полной лицензии СЕРТ (T/R 61-02).
                </p>
                break;
            case 3:
                <p class="fst-italic">
                    Третья квалификационная категория соответствует лицензии СЕРТ новичка. Для её получения нужно сдать теоретический экзамен по программе лицензии СЕРТ новичка (ERC32).
                </p>
                break;
            case 4:
                <p class="fst-italic">
                    Четвёртая квалификационная категория не имеет соответствия какой – либо лицензии СЕРТ. Но для её получения нужно сдать теоретический экзамен по программе лицензии СЕРТ начального уровня (ECC 89).
                </p>
                break;
        }

        <p>Вопросы выбираются случайным образом из предназначенных для данной категории, при этом выбирается как минимум один вопрос из каждой темы.</p>

        <p>
            <NavLink class="btn btn-outline-secondary" href="" Match="NavLinkMatch.All">Отменить и вернуться на главный экран</NavLink>
        </p>

        var qNum = 1;

        <EditForm EditContext="_editContext" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@HandleValidSubmit">

            @foreach (var t in exam.Topics)
            {
                <h2 style="margin-bottom: 1rem;text-align: center; " class="text-decoration-underline">Тема: @t.Name</h2>

                foreach (var q in t.Questions)
                {
                    string qName = "question" + qNum;
                    int qIndex = qNum - 1;

                    <div style="margin-bottom: 2rem;">

                        <div class="d-flex justify-content-start">
                            <p style="margin-right: 1rem;">
                                <span class="badge bg-primary" style="width: 2rem;">@qNum</span>
                            </p>
                            <p class="blockquote">
                                @q.Text
                                <CustomValidationMessage For="() => form.AnswerIndices[qIndex].Value" Class="badge bg-danger"/>
                            </p>

                        </div>

                        @if (q.HasImage != null && q.HasImage.Value)
                        {
                            <div class="d-flex justify-content-center text-center" style="margin-bottom: 1em;">
                                <img src="i/@(q.Num).png" class="img-fluid" style="margin-left: 3rem; width: 100%; max-width: 600px;"/>
                            </div>
                        }

                        <InputRadioGroup @bind-Value="form.AnswerIndices[qIndex].Value">

                            @for (int i = 0; i < 4; i++)
                            {
                                <div class="form-check d-flex justify-content-start" style="">
                                    <div style="padding: 0.15rem 0.25rem 0.15rem 3.25rem;">
                                        <InputRadio Value="@i" class="form-check-input" id="@(qName + i)"/>
                                    </div>
                                    <label class="form-check-label" for="@(qName + i)" style="margin-right: 3rem; padding: 0.15rem 0; min-width: 10rem;">
                                        @q.Answers[i]
                                    </label>
                                </div>
                            }

                        </InputRadioGroup>
                    </div>
                    qNum++;
                }
            }

            <div class="btn-group" role="group" aria-label="Basic example">
                <button type="submit" class="btn btn-primary @(_formSubmitted ? "disabled" : "")">Проверить результаты</button>
                <NavLink class="btn btn-outline-secondary" href="" Match="NavLinkMatch.All">Отменить и вернуться на главный экран</NavLink>
            </div>
        </EditForm>
    }
}
else
{
    if (checkResult.Data.Count == 0)
    {
        <div class="alert alert-success">Поздравляем! Вы успешно сдали экзамен, ответив правильно на все @exam.TotalCount вопросов!</div>
    }
    else if (checkResult.Data.Count > 0 && checkResult.Data.Count <= exam.MaxWrongAnswers)
    {
        <div class="alert alert-warning">Поздравляем! Вы успешно сдали экзамен ответив правильно на @(exam.TotalCount - checkResult.Data.Count) вопросов из @exam.TotalCount.</div>
    }
    else
    {
        <div class="alert alert-danger">К сожалению, вы не сдали экзамен. Вы ответили правильно на @(exam.TotalCount - checkResult.Data.Count) вопросов из @exam.TotalCount.</div>
    }

    if (checkResult.Data.Count > 0)
    {
        <p>Вопросы, в которых вы допустили ошибки:</p>


        var allQuestions = exam.AllQuestions.ToList();

        <ul class="list-group list-group-flush">
            @for (var index = 0; index < checkResult.Data.Count; index++)
            {
                var wrong = checkResult.Data[index];
                <li class="list-group-item">
                    <div style="margin-bottom: 2rem;">
                        <blockquote class="blockquote fw-bold">
                            <p>
                                @allQuestions[wrong[0]].Text
                            </p>
                        </blockquote>
                        
                        @if (allQuestions[wrong[0]].HasImage != null && allQuestions[wrong[0]].HasImage.Value)
                        {
                            <div class="d-flex justify-content-center text-center" style="margin-bottom: 1em;">
                                <img src="i/@(allQuestions[wrong[0]].Num).png" class="img-fluid" style="margin-left: 3rem; width: 100%; max-width: 600px;"/>
                            </div>
                        }

                        <div class="row" style="margin-bottom: 1rem;">
                            <div class="col-3">
                                Вы ответили:
                            </div>
                            <div class="col-8">
                                <span class="text-danger">
                                    @allQuestions[wrong[0]].Answers[wrong[2]]
                                </span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-3">
                                Правильный ответ:
                            </div>
                            <div class="col-8">
                                <span class="text-success fw-bold">
                                    @allQuestions[wrong[0]].Answers[wrong[1]]
                                </span>
                            </div>
                        </div>

                    </div>
                </li>
            }
        </ul>
    }

    <button class="btn btn-primary" @onclick="ReInitAsync">Пройти тест еще раз</button>
    <a class="btn btn-secondary" href="/">Вернуться на главный экран</a>
}

@inject IScrollHandler _scrollHandler

@code {
    private EditContext _editContext;
    private ValidationMessageStore _messageStore;
    private bool _formSubmitted = false;

    [Parameter]
    public int Category { get; set; }

    ExamDto exam;
    ExamResultForm form;
    ExamCheckResultDto checkResult;

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Category < 1 || Category > 4)
        {
            NavigationManager.NavigateTo("404");
            return;
        }

        await ReInitAsync();
    }

    async Task ReInitAsync()
    {
        using var response = await Http.PostAsync($"test/{Category}/new", new StringContent(""));
        exam = await response.Content.ReadFromJsonAsync<ExamDto>();

        form = new ExamResultForm(exam.TotalCount);

        if (_editContext == null)
        {
            _editContext = new(exam);
            _editContext.OnValidationRequested += HandleValidationRequested;
        }

        if (_messageStore == null)
            _messageStore = new(_editContext);
        else
            _messageStore.Clear();

        _formSubmitted = false;
        await _scrollHandler.ScrollToPageTopAsync(true);
    }

    private void HandleInvalidSubmit()
    {
    }

    private async Task HandleValidSubmit()
    {
        var request = new ExamResultRequest
        {
            Token = exam.Token,
            AnswerIndices = form.AnswerIndices.Select(x => x.Value).ToArray()
        };

        using var response = await Http.PostAsJsonAsync($"test/{Category}/check", request);
        checkResult = await response.Content.ReadFromJsonAsync<ExamCheckResultDto>();

        _formSubmitted = true;
        await _scrollHandler.ScrollToPageTopAsync(true);
    }

    private void HandleValidationRequested(object sender,
        ValidationRequestedEventArgs args)
    {
        _messageStore.Clear();

        foreach (var aIndex in form.AnswerIndices)
        {
            if (aIndex.Value == null)
                _messageStore.Add(() => aIndex.Value, "Выберите ответ");
        }
    }

    public void Dispose()
    {
        _editContext.OnValidationRequested -= HandleValidationRequested;
    }

}